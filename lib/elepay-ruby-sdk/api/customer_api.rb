=begin
#elepay API リファレンス

#elepay APIはRESTをベースに構成された決済APIです。支払い処理、返金処理など、決済に関わる運用における様々なことができます。

The version of the OpenAPI document: 1.1.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.2

=end

require 'cgi'

module ElepayApi
  class CustomerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create customer
    # カスタマを作成します。
    # @param customer_req [CustomerReq] カスタマリクエスト
    # @param [Hash] opts the optional parameters
    # @return [CustomerDto]
    def create_customer(customer_req, opts = {})
      data, _status_code, _headers = create_customer_with_http_info(customer_req, opts)
      data
    end

    # Create customer
    # カスタマを作成します。
    # @param customer_req [CustomerReq] カスタマリクエスト
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomerDto, Integer, Hash)>] CustomerDto data, response status code and response headers
    def create_customer_with_http_info(customer_req, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.create_customer ...'
      end
      # verify the required parameter 'customer_req' is set
      if @api_client.config.client_side_validation && customer_req.nil?
        fail ArgumentError, "Missing the required parameter 'customer_req' when calling CustomerApi.create_customer"
      end
      # resource path
      local_var_path = '/customers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(customer_req) 

      # return_type
      return_type = opts[:return_type] || 'CustomerDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#create_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create source
    # カスタマソースを作成します。
    # @param customer_id [String] Customer ID
    # @param source_req [SourceReq] カスタマソースリクエスト
    # @param [Hash] opts the optional parameters
    # @return [SourceDto]
    def create_source(customer_id, source_req, opts = {})
      data, _status_code, _headers = create_source_with_http_info(customer_id, source_req, opts)
      data
    end

    # Create source
    # カスタマソースを作成します。
    # @param customer_id [String] Customer ID
    # @param source_req [SourceReq] カスタマソースリクエスト
    # @param [Hash] opts the optional parameters
    # @return [Array<(SourceDto, Integer, Hash)>] SourceDto data, response status code and response headers
    def create_source_with_http_info(customer_id, source_req, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.create_source ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CustomerApi.create_source"
      end
      # verify the required parameter 'source_req' is set
      if @api_client.config.client_side_validation && source_req.nil?
        fail ArgumentError, "Missing the required parameter 'source_req' when calling CustomerApi.create_source"
      end
      # resource path
      local_var_path = '/customers/{customerId}/sources'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(source_req) 

      # return_type
      return_type = opts[:return_type] || 'SourceDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#create_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete customer
    # カスタマを削除します
    # @param customer_id [String] Customer ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_customer(customer_id, opts = {})
      delete_customer_with_http_info(customer_id, opts)
      nil
    end

    # Delete customer
    # カスタマを削除します
    # @param customer_id [String] Customer ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_customer_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.delete_customer ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CustomerApi.delete_customer"
      end
      # resource path
      local_var_path = '/customers/{customerId}'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#delete_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete source
    # カスタマソースを削除します
    # @param customer_id [String] Customer ID
    # @param source_id [String] Source ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_source(customer_id, source_id, opts = {})
      delete_source_with_http_info(customer_id, source_id, opts)
      nil
    end

    # Delete source
    # カスタマソースを削除します
    # @param customer_id [String] Customer ID
    # @param source_id [String] Source ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_source_with_http_info(customer_id, source_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.delete_source ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CustomerApi.delete_source"
      end
      # verify the required parameter 'source_id' is set
      if @api_client.config.client_side_validation && source_id.nil?
        fail ArgumentError, "Missing the required parameter 'source_id' when calling CustomerApi.delete_source"
      end
      # resource path
      local_var_path = '/customers/{customerId}/sources/{sourceId}'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s)).sub('{' + 'sourceId' + '}', CGI.escape(source_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#delete_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List customers
    # カスタマ情報を一覧で取得します。
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 最大件数 (default to 20)
    # @option opts [Integer] :offset 検索開始位置 (default to 0)
    # @return [CustomerResponse]
    def list_customers(opts = {})
      data, _status_code, _headers = list_customers_with_http_info(opts)
      data
    end

    # List customers
    # カスタマ情報を一覧で取得します。
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 最大件数
    # @option opts [Integer] :offset 検索開始位置
    # @return [Array<(CustomerResponse, Integer, Hash)>] CustomerResponse data, response status code and response headers
    def list_customers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.list_customers ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling CustomerApi.list_customers, must be smaller than or equal to 100.'
      end

      # resource path
      local_var_path = '/customers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'CustomerResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#list_customers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List sources by customer ID
    # カスタマソース情報を一覧で取得します。
    # @param customer_id [String] Customer ID
    # @param [Hash] opts the optional parameters
    # @option opts [PaymentMethodType] :payment_method 決済方法
    # @return [SourceResponse]
    def list_sources(customer_id, opts = {})
      data, _status_code, _headers = list_sources_with_http_info(customer_id, opts)
      data
    end

    # List sources by customer ID
    # カスタマソース情報を一覧で取得します。
    # @param customer_id [String] Customer ID
    # @param [Hash] opts the optional parameters
    # @option opts [PaymentMethodType] :payment_method 決済方法
    # @return [Array<(SourceResponse, Integer, Hash)>] SourceResponse data, response status code and response headers
    def list_sources_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.list_sources ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CustomerApi.list_sources"
      end
      # resource path
      local_var_path = '/customers/{customerId}/sources'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'paymentMethod'] = opts[:'payment_method'] if !opts[:'payment_method'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'SourceResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#list_sources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve customer
    # カスタマ情報を取得します。
    # @param customer_id [String] Customer ID
    # @param [Hash] opts the optional parameters
    # @return [CustomerDto]
    def retrieve_customer(customer_id, opts = {})
      data, _status_code, _headers = retrieve_customer_with_http_info(customer_id, opts)
      data
    end

    # Retrieve customer
    # カスタマ情報を取得します。
    # @param customer_id [String] Customer ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomerDto, Integer, Hash)>] CustomerDto data, response status code and response headers
    def retrieve_customer_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.retrieve_customer ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CustomerApi.retrieve_customer"
      end
      # resource path
      local_var_path = '/customers/{customerId}'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'CustomerDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#retrieve_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve source
    # カスタマ情報を取得します。
    # @param customer_id [String] Customer ID
    # @param source_id [String] Source ID
    # @param [Hash] opts the optional parameters
    # @return [SourceDto]
    def retrieve_source(customer_id, source_id, opts = {})
      data, _status_code, _headers = retrieve_source_with_http_info(customer_id, source_id, opts)
      data
    end

    # Retrieve source
    # カスタマ情報を取得します。
    # @param customer_id [String] Customer ID
    # @param source_id [String] Source ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(SourceDto, Integer, Hash)>] SourceDto data, response status code and response headers
    def retrieve_source_with_http_info(customer_id, source_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.retrieve_source ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CustomerApi.retrieve_source"
      end
      # verify the required parameter 'source_id' is set
      if @api_client.config.client_side_validation && source_id.nil?
        fail ArgumentError, "Missing the required parameter 'source_id' when calling CustomerApi.retrieve_source"
      end
      # resource path
      local_var_path = '/customers/{customerId}/sources/{sourceId}'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s)).sub('{' + 'sourceId' + '}', CGI.escape(source_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'SourceDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#retrieve_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
