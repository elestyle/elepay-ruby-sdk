=begin
#elepay API リファレンス

#elepay APIはRESTをベースに構成された決済APIです。支払い処理、返金処理など、決済に関わる運用における様々なことができます。

The version of the OpenAPI document: 1.1.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.2

=end

require 'cgi'

module ElepayApi
  class RefundApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create refund
    # 決済の全額あるいは一部の返金処理を行います。
    # @param id [String] Charge ID
    # @param refund_req [RefundReq] 返金の詳細情報
    # @param [Hash] opts the optional parameters
    # @return [RefundDto]
    def create_refund(id, refund_req, opts = {})
      data, _status_code, _headers = create_refund_with_http_info(id, refund_req, opts)
      data
    end

    # Create refund
    # 決済の全額あるいは一部の返金処理を行います。
    # @param id [String] Charge ID
    # @param refund_req [RefundReq] 返金の詳細情報
    # @param [Hash] opts the optional parameters
    # @return [Array<(RefundDto, Integer, Hash)>] RefundDto data, response status code and response headers
    def create_refund_with_http_info(id, refund_req, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RefundApi.create_refund ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RefundApi.create_refund"
      end
      # verify the required parameter 'refund_req' is set
      if @api_client.config.client_side_validation && refund_req.nil?
        fail ArgumentError, "Missing the required parameter 'refund_req' when calling RefundApi.create_refund"
      end
      # resource path
      local_var_path = '/charges/{id}/refunds'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(refund_req) 

      # return_type
      return_type = opts[:return_type] || 'RefundDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RefundApi#create_refund\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List refunds
    # 返金に関する情報を一覧で取得します。
    # @param id [String] Charge ID
    # @param [Hash] opts the optional parameters
    # @return [RefundsResponse]
    def list_charges_refunds(id, opts = {})
      data, _status_code, _headers = list_charges_refunds_with_http_info(id, opts)
      data
    end

    # List refunds
    # 返金に関する情報を一覧で取得します。
    # @param id [String] Charge ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(RefundsResponse, Integer, Hash)>] RefundsResponse data, response status code and response headers
    def list_charges_refunds_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RefundApi.list_charges_refunds ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RefundApi.list_charges_refunds"
      end
      # resource path
      local_var_path = '/charges/{id}/refunds'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'RefundsResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RefundApi#list_charges_refunds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve refund
    # 返金に関する詳細情報を取得します。
    # @param id [String] Charge ID
    # @param refund_id [String] Refund ID
    # @param [Hash] opts the optional parameters
    # @return [RefundDto]
    def retrieve_charge_refund(id, refund_id, opts = {})
      data, _status_code, _headers = retrieve_charge_refund_with_http_info(id, refund_id, opts)
      data
    end

    # Retrieve refund
    # 返金に関する詳細情報を取得します。
    # @param id [String] Charge ID
    # @param refund_id [String] Refund ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(RefundDto, Integer, Hash)>] RefundDto data, response status code and response headers
    def retrieve_charge_refund_with_http_info(id, refund_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RefundApi.retrieve_charge_refund ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RefundApi.retrieve_charge_refund"
      end
      # verify the required parameter 'refund_id' is set
      if @api_client.config.client_side_validation && refund_id.nil?
        fail ArgumentError, "Missing the required parameter 'refund_id' when calling RefundApi.retrieve_charge_refund"
      end
      # resource path
      local_var_path = '/charges/{id}/refunds/{refundId}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'refundId' + '}', CGI.escape(refund_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'RefundDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RefundApi#retrieve_charge_refund\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
