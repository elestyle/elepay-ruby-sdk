=begin
#elepay API リファレンス

#elepay APIはRESTをベースに構成された決済APIです。支払い処理、返金処理など、決済に関わる運用における様々なことができます。

The version of the OpenAPI document: 1.1.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.2

=end

require 'cgi'

module ElepayApi
  class ChargeApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create charge
    # 決済処理を行います。
    # @param charge_req [ChargeReq] 支払リクエスト
    # @param [Hash] opts the optional parameters
    # @return [ChargeDto]
    def create_charge(charge_req, opts = {})
      data, _status_code, _headers = create_charge_with_http_info(charge_req, opts)
      data
    end

    # Create charge
    # 決済処理を行います。
    # @param charge_req [ChargeReq] 支払リクエスト
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChargeDto, Integer, Hash)>] ChargeDto data, response status code and response headers
    def create_charge_with_http_info(charge_req, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChargeApi.create_charge ...'
      end
      # verify the required parameter 'charge_req' is set
      if @api_client.config.client_side_validation && charge_req.nil?
        fail ArgumentError, "Missing the required parameter 'charge_req' when calling ChargeApi.create_charge"
      end
      # resource path
      local_var_path = '/charges'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(charge_req) 

      # return_type
      return_type = opts[:return_type] || 'ChargeDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargeApi#create_charge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List charges
    # 決済に関する情報を一覧で取得します。
    # @param [Hash] opts the optional parameters
    # @option opts [Array<PaymentMethodType>] :payment_method 決済方法(複数の指定が可能です)
    # @option opts [Integer] :from 開始時間（UTC）。指定した時間以降に作成されたデータを取得します。
    # @option opts [Integer] :to 終了時間（UTC）。指定した時間以前に作成されたデータを取得します
    # @option opts [ChargeDateTimeType] :date_field 開始時間と終了時間の項目を指定します。 - paid_time 払う時間 - create_time 決済新規時間 
    # @option opts [ChargeStatusType] :status 支払状況
    # @option opts [Integer] :limit 最大件数 (default to 20)
    # @option opts [Integer] :offset 検索開始位置 (default to 0)
    # @option opts [ChargeDateTimeType] :sort ソート項目 - paid_time 払う時間 - create_time 決済新規時間 
    # @option opts [SortOrderType] :order ソート順 - desc 降順 - asc 昇順 
    # @return [ChargesResponse]
    def list_charges(opts = {})
      data, _status_code, _headers = list_charges_with_http_info(opts)
      data
    end

    # List charges
    # 決済に関する情報を一覧で取得します。
    # @param [Hash] opts the optional parameters
    # @option opts [Array<PaymentMethodType>] :payment_method 決済方法(複数の指定が可能です)
    # @option opts [Integer] :from 開始時間（UTC）。指定した時間以降に作成されたデータを取得します。
    # @option opts [Integer] :to 終了時間（UTC）。指定した時間以前に作成されたデータを取得します
    # @option opts [ChargeDateTimeType] :date_field 開始時間と終了時間の項目を指定します。 - paid_time 払う時間 - create_time 決済新規時間 
    # @option opts [ChargeStatusType] :status 支払状況
    # @option opts [Integer] :limit 最大件数
    # @option opts [Integer] :offset 検索開始位置
    # @option opts [ChargeDateTimeType] :sort ソート項目 - paid_time 払う時間 - create_time 決済新規時間 
    # @option opts [SortOrderType] :order ソート順 - desc 降順 - asc 昇順 
    # @return [Array<(ChargesResponse, Integer, Hash)>] ChargesResponse data, response status code and response headers
    def list_charges_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChargeApi.list_charges ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ChargeApi.list_charges, must be smaller than or equal to 100.'
      end

      # resource path
      local_var_path = '/charges'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'paymentMethod'] = @api_client.build_collection_param(opts[:'payment_method'], :multi) if !opts[:'payment_method'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?
      query_params[:'dateField'] = opts[:'date_field'] if !opts[:'date_field'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ChargesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargeApi#list_charges\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve charge
    # 決済に関する詳細情報を取得します。
    # @param id [String] Charge ID
    # @param [Hash] opts the optional parameters
    # @return [ChargeDto]
    def retrieve_charge(id, opts = {})
      data, _status_code, _headers = retrieve_charge_with_http_info(id, opts)
      data
    end

    # Retrieve charge
    # 決済に関する詳細情報を取得します。
    # @param id [String] Charge ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChargeDto, Integer, Hash)>] ChargeDto data, response status code and response headers
    def retrieve_charge_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChargeApi.retrieve_charge ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ChargeApi.retrieve_charge"
      end
      # resource path
      local_var_path = '/charges/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ChargeDto' 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargeApi#retrieve_charge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
